#!/bin/bash

# Decentralized Social Recommendation - Quick Start Script
# This script helps you quickly set up and run the data collection system

set -e  # Exit on any error

echo "üöÄ Decentralized Social Recommendation - Quick Start"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is installed
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    print_success "Docker and Docker Compose are available"
}

# Check if Python is installed
check_python() {
    if ! command -v python3 &> /dev/null; then
        print_warning "Python 3 is not installed. You can still use Docker mode."
        return 1
    fi
    
    python_version=$(python3 --version | cut -d' ' -f2)
    print_success "Python $python_version is available"
    return 0
}

# Create necessary directories
create_directories() {
    print_status "Creating necessary directories..."
    mkdir -p logs data notebooks monitoring/grafana/provisioning monitoring/prometheus
    print_success "Directories created"
}

# Create environment file
create_env_file() {
    if [ ! -f .env ]; then
        print_status "Creating .env file from template..."
        cat > .env << EOF
# Decentralized Social Recommendation - Environment Configuration
# Generated by start.sh

# Database Configuration
MONGODB_URI=mongodb://admin:password123@localhost:27017
MONGODB_DATABASE=social_recommendation
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password123
REDIS_HOST=localhost
REDIS_PORT=6379

# Logging
LOG_LEVEL=INFO

# Collection Settings
MAX_PROFILES=100
MAX_POSTS_PER_PROFILE=50
COLLECTION_INTERVAL=60
EOF
        print_success ".env file created"
    else
        print_status ".env file already exists"
    fi
}

# Start services with Docker
start_docker_services() {
    print_status "Starting services with Docker Compose..."
    
    # Pull latest images
    docker-compose pull
    
    # Start services
    docker-compose up -d mongodb neo4j redis
    
    # Wait for services to be ready
    print_status "Waiting for services to be ready..."
    sleep 30
    
    # Check service status
    if docker-compose ps | grep -q "Up"; then
        print_success "Docker services started successfully"
    else
        print_error "Failed to start Docker services"
        exit 1
    fi
}

# Start services without Docker
start_local_services() {
    print_status "Starting local services..."
    
    # Check if services are already running
    if pgrep -f "mongod" > /dev/null; then
        print_status "MongoDB is already running"
    else
        print_warning "MongoDB is not running. Please start MongoDB manually."
    fi
    
    if pgrep -f "neo4j" > /dev/null; then
        print_status "Neo4j is already running"
    else
        print_warning "Neo4j is not running. Please start Neo4j manually."
    fi
    
    if pgrep -f "redis-server" > /dev/null; then
        print_status "Redis is already running"
    else
        print_warning "Redis is not running. Please start Redis manually."
    fi
}

# Install Python dependencies
install_python_deps() {
    if command -v python3 &> /dev/null; then
        print_status "Installing Python dependencies..."
        pip3 install -r config/requirements.txt
        print_success "Python dependencies installed"
    fi
}

# Test the system
test_system() {
    print_status "Testing the system..."
    
    if command -v python3 &> /dev/null; then
        python3 run_collection.py --storage-only
    else
        print_warning "Python not available, skipping system test"
    fi
}

# Show service URLs
show_service_urls() {
    echo ""
    echo "üåê Service URLs:"
    echo "=================="
    echo "MongoDB: mongodb://localhost:27017"
    echo "Neo4j Browser: http://localhost:7474"
    echo "Redis: localhost:6379"
    echo "Mongo Express: http://localhost:8081"
    echo "Grafana: http://localhost:3000 (admin/admin123)"
    echo "Prometheus: http://localhost:9090"
    echo "Jupyter Lab: http://localhost:8888"
    echo ""
}

# Show usage instructions
show_usage() {
    echo "üìñ Usage Instructions:"
    echo "======================"
    echo ""
    echo "1. Start data collection:"
    echo "   python3 data_collection/main_collector.py --max-profiles 100 --max-posts 50"
    echo ""
    echo "2. Run continuous collection:"
    echo "   python3 data_collection/main_collector.py --continuous --interval 60"
    echo ""
    echo "3. View statistics:"
    echo "   python3 data_collection/main_collector.py --stats"
    echo ""
    echo "4. Test the system:"
    echo "   python3 run_collection.py"
    echo ""
    echo "5. Stop all services:"
    echo "   docker-compose down"
    echo ""
}

# Main function
main() {
    local mode=${1:-docker}
    
    case $mode in
        "docker")
            print_status "Starting in Docker mode..."
            check_docker
            create_directories
            create_env_file
            start_docker_services
            ;;
        "local")
            print_status "Starting in local mode..."
            check_python
            create_directories
            create_env_file
            start_local_services
            install_python_deps
            ;;
        "test")
            test_system
            exit 0
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [docker|local|test|help]"
            echo ""
            echo "Modes:"
            echo "  docker  - Start services using Docker (default)"
            echo "  local   - Start services locally (requires manual setup)"
            echo "  test    - Test the system"
            echo "  help    - Show this help message"
            exit 0
            ;;
        *)
            print_error "Unknown mode: $mode"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
    
    # Test the system
    test_system
    
    # Show service information
    show_service_urls
    show_usage
    
    print_success "Setup completed successfully!"
    echo ""
    echo "üéâ Your decentralized social recommendation system is ready!"
    echo "   Check the logs directory for detailed information."
}

# Run main function with arguments
main "$@"
